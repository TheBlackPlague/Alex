<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>

<#@ assembly name="$(ProjectDir)$(OutDir)$(TargetFileName)" #>
<#@ assembly name="$(ProjectDir)$(OutDir)/Alex" #>
<#@ assembly name="$(ProjectDir)$(OutDir)/Alex.API.dll" #>
<#@ assembly name="$(ProjectDir)$(OutDir)/Alex.ResourcePackLib.dll" #>
<#@ assembly name="$(ProjectDir)$(OutDir)/MonoGame.Framework.dll" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Alex.ResourcePackLib.Json.Models.Entities" #>
<#@ import namespace="ResourceConverterCore" #>
<#@ import namespace="ResourceConverterCore.Converter" #>

<#

	var EntityModels = ResourceConverterContext.EntityModels;
	var CurrentModelName = ResourceConverterContext.CurrentModelName;
	var CurrentModel = ResourceConverterContext.CurrentModel;

#>

using Alex.ResourcePackLib.Json.Models.Entities;
using Microsoft.Xna.Framework;

namespace Alex.Entities.Models 
{

	public partial class <#= CurrentModelName #>Model : EntityModel
	{
		public <#= CurrentModelName #>Model()
		{
			<#
				WriteLine($"Name = \"{CurrentModel.Name}\";");
				WriteLine($"\t\t\tVisibleBoundsWidth = {CurrentModel.VisibleBoundsWidth};");
				WriteLine($"\t\t\tVisibleBoundsHeight = {CurrentModel.VisibleBoundsHeight};");
				WriteLine($"\t\t\tVisibleBoundsOffset = new Vector3({CurrentModel.VisibleBoundsOffset.X}f, {CurrentModel.VisibleBoundsOffset.Y}f, {CurrentModel.VisibleBoundsOffset.Z}f);");
				WriteLine($"\t\t\tTexturewidth = {CurrentModel.Texturewidth};");
				WriteLine($"\t\t\tTextureheight = {CurrentModel.Textureheight};");
				if (CurrentModel.Bones != null)
				{
					WriteLine($"\t\t\tBones = new EntityModelBone[{CurrentModel.Bones.Length}]");
					WriteLine("\t\t\t{");
				foreach(var bone in CurrentModel.Bones)
				{
					StringBuilder builder = new StringBuilder();
					if (bone.Cubes != null)
					{
						builder.Append($"Cubes = new EntityModelCube[{bone.Cubes.Length}]");
						builder.Append("{\r\n");
						foreach (var cube in bone.Cubes)
						{
							builder.Append(
								$"\t\t\t\t\t\tnew EntityModelCube()\r\n\t\t\t\t\t\t{{\r\n\t\t\t\t\t\t\tOrigin = new Vector3({cube.Origin.X}f,{cube.Origin.Y}f,{cube.Origin.Z}f),\r\n\t\t\t\t\t\t\tSize = new Vector3({cube.Size.X}f, {cube.Size.Y}f, {cube.Size.Z}f),\r\n\t\t\t\t\t\t\tUv = new Vector2({cube.Uv.X}f, {cube.Uv.Y}f)\r\n\t\t\t\t\t\t}},\r\n");
						}
						builder.Append("\t\t\t\t\t}");
					}
					else
					{
						builder.Append($"Cubes = new EntityModelCube[0]");
					}
					WriteLine($"\t\t\t\tnew EntityModelBone(){{ \r\n\t\t\t\t\tName = \"{bone.Name}\",\r\n\t\t\t\t\tParent = \"{bone.Parent}\",\r\n\t\t\t\t\tPivot = new Vector3({bone.Pivot.X}f,{bone.Pivot.Y}f,{bone.Pivot.Z}f),\r\n\t\t\t\t\tRotation = new Vector3({bone.Rotation.X}f,{bone.Rotation.Y}f,{bone.Rotation.Z}f),\r\n\t\t\t\t\tNeverRender = {(bone.NeverRender ? "true" : "false")},\r\n\t\t\t\t\tMirror = {(bone.Mirror ? "true" : "false")},\r\n\t\t\t\t\tReset = {(bone.Reset ? "true" : "false")},\r\n\t\t\t\t\t{builder.ToString()}\r\n\t\t\t\t}},");
				}
				WriteLine("\t\t\t};");
				}
				else
				{
					WriteLine($"\t\t\tBones = new EntityModelBone[0];");
				}
			#>
		}

	}

}